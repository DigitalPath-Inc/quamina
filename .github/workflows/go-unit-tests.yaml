name: Unit Tests

on:
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

concurrency:
  group: quamina-unit-tests-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Unit Tests
    strategy:
      matrix:
        go-version: ["1.18"]
        platform: ["ubuntu-latest"]

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@d0a58c1c4d2b25278816e339b944508c875f3613
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: Restore Go cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod

          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum', 'testdata/**') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install tparse
        run: go install github.com/mfridman/tparse@latest

      - name: Test
        env:
          GOFLAGS: "-v -race -count=1 -json"
        run: go test ./... | tparse -all

      - name: Verify git clean
        shell: bash
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "${{ github.repository }} up to date."
          else
            echo "${{ github.repository }} is dirty."
            echo "::error:: $(git status)"
            exit 1
          fi

  # see https://github.com/timbray/quamina/issues/28 for details why a separate job
  coverage:
      name: Create Coverage Report
      strategy:
        matrix:
          go-version: ["1.18"]
          platform: ["ubuntu-latest"]

      runs-on: ${{ matrix.platform }}
      timeout-minutes: 10

      steps:
        - name: Checkout repository
          uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

        - name: Set up Go ${{ matrix.go-version }}
          uses: actions/setup-go@d0a58c1c4d2b25278816e339b944508c875f3613
          with:
            go-version: ${{ matrix.go-version }}
          id: go

        - name: Restore Go cache
          uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
          with:
            path: |
              ~/.cache/go-build
              ~/go/pkg/mod

            key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum', 'testdata/**') }}
            restore-keys: |
              ${{ runner.os }}-go-${{ matrix.go-version }}-

        - name: Install tparse
          run: go install github.com/mfridman/tparse@latest

        - name: Check for .codecov.yaml
          id: codecov-enabled
          uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
          with:
            files: .codecov.yaml

        - if: steps.codecov-enabled.outputs.files_exists == 'true'
          name: Produce Go Coverage Report File
          env:
            COVER_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
            GOFLAGS: "-v -count=1 -json"
          run: go test $COVER_OPTS ./... | tparse -all

        - if: steps.codecov-enabled.outputs.files_exists == 'true'
          name: Upload Codecov Report
          uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70
